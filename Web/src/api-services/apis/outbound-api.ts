/* tslint:disable */
/* eslint-disable */
/**
 * HiGenious 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/HiGenious/'>https://gitee.com/zuohuaijun/HiGenious</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultListWmsOutboundOutput } from '../models';
import { AdminResultSqlSugarPagedListWmsOutboundOutput } from '../models';
import { AdminResultWmsOutbound } from '../models';
import { WmsOutboundAddInput } from '../models';
import { WmsOutboundInput } from '../models';
import { WmsOutboundUpdateInput } from '../models';
/**
 * OutboundApi - axios parameter creator
 * @export
 */
export const OutboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取wms_outbound列表
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundAddInstructionPost: async (id?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/addInstruction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加wms_outbound
         * @param {WmsOutboundAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundAddPost: async (body?: WmsOutboundAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导出发运信息
         * @param {WmsOutboundInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundExportPost: async (body?: WmsOutboundInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载Excel模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundExportTemplatePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/exportTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导入发运信息
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundImportExcelPostForm: async (file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/importExcel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取wms_outbound列表
         * @param {string} [sysOutboundNumber] 
         * @param {string} [externOrderNumber] 
         * @param {number} [customerId] 
         * @param {number} [warehouseId] 
         * @param {string} [warehouseCode] 
         * @param {number} [targetWarehouseId] 
         * @param {string} [targetWarehouseCode] 
         * @param {string} [type] 
         * @param {number} [status] 
         * @param {Date} [orderTime] 
         * @param {string} [orgId] 
         * @param {string} [province] 
         * @param {string} [city] 
         * @param {string} [district] 
         * @param {string} [address] 
         * @param {string} [contactPerson] 
         * @param {string} [mobileNumber] 
         * @param {string} [logisticsName] 
         * @param {string} [vehicleNumber] 
         * @param {number} [detailCount] 
         * @param {number} [ownerId] 
         * @param {string} [customerCode] 
         * @param {string} [customerName] 
         * @param {string} [lineCode] 
         * @param {Date} [sendDate] 
         * @param {Date} [arriveDate] 
         * @param {string} [remark] 
         * @param {number} [createUserId] 
         * @param {string} [createUserName] 
         * @param {Date} [createTime] 
         * @param {number} [updateUserId] 
         * @param {string} [updateUserName] 
         * @param {Date} [updateTime] 
         * @param {Array<Date>} [orderTimeRange] 
         * @param {Array<Date>} [sendDateRange] 
         * @param {Array<Date>} [arriveDateRange] 
         * @param {Array<Date>} [createTimeRange] 
         * @param {Array<Date>} [updateTimeRange] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundListGet: async (sysOutboundNumber?: string, externOrderNumber?: string, customerId?: number, warehouseId?: number, warehouseCode?: string, targetWarehouseId?: number, targetWarehouseCode?: string, type?: string, status?: number, orderTime?: Date, orgId?: string, province?: string, city?: string, district?: string, address?: string, contactPerson?: string, mobileNumber?: string, logisticsName?: string, vehicleNumber?: string, detailCount?: number, ownerId?: number, customerCode?: string, customerName?: string, lineCode?: string, sendDate?: Date, arriveDate?: Date, remark?: string, createUserId?: number, createUserName?: string, createTime?: Date, updateUserId?: number, updateUserName?: string, updateTime?: Date, orderTimeRange?: Array<Date>, sendDateRange?: Array<Date>, arriveDateRange?: Array<Date>, createTimeRange?: Array<Date>, updateTimeRange?: Array<Date>, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sysOutboundNumber !== undefined) {
                localVarQueryParameter['SysOutboundNumber'] = sysOutboundNumber;
            }

            if (externOrderNumber !== undefined) {
                localVarQueryParameter['ExternOrderNumber'] = externOrderNumber;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['CustomerId'] = customerId;
            }

            if (warehouseId !== undefined) {
                localVarQueryParameter['WarehouseId'] = warehouseId;
            }

            if (warehouseCode !== undefined) {
                localVarQueryParameter['WarehouseCode'] = warehouseCode;
            }

            if (targetWarehouseId !== undefined) {
                localVarQueryParameter['TargetWarehouseId'] = targetWarehouseId;
            }

            if (targetWarehouseCode !== undefined) {
                localVarQueryParameter['TargetWarehouseCode'] = targetWarehouseCode;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (orderTime !== undefined) {
                localVarQueryParameter['OrderTime'] = (orderTime as any instanceof Date) ?
                    (orderTime as any).toISOString() :
                    orderTime;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['OrgId'] = orgId;
            }

            if (province !== undefined) {
                localVarQueryParameter['Province'] = province;
            }

            if (city !== undefined) {
                localVarQueryParameter['City'] = city;
            }

            if (district !== undefined) {
                localVarQueryParameter['District'] = district;
            }

            if (address !== undefined) {
                localVarQueryParameter['Address'] = address;
            }

            if (contactPerson !== undefined) {
                localVarQueryParameter['ContactPerson'] = contactPerson;
            }

            if (mobileNumber !== undefined) {
                localVarQueryParameter['MobileNumber'] = mobileNumber;
            }

            if (logisticsName !== undefined) {
                localVarQueryParameter['LogisticsName'] = logisticsName;
            }

            if (vehicleNumber !== undefined) {
                localVarQueryParameter['VehicleNumber'] = vehicleNumber;
            }

            if (detailCount !== undefined) {
                localVarQueryParameter['DetailCount'] = detailCount;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['OwnerId'] = ownerId;
            }

            if (customerCode !== undefined) {
                localVarQueryParameter['CustomerCode'] = customerCode;
            }

            if (customerName !== undefined) {
                localVarQueryParameter['CustomerName'] = customerName;
            }

            if (lineCode !== undefined) {
                localVarQueryParameter['LineCode'] = lineCode;
            }

            if (sendDate !== undefined) {
                localVarQueryParameter['SendDate'] = (sendDate as any instanceof Date) ?
                    (sendDate as any).toISOString() :
                    sendDate;
            }

            if (arriveDate !== undefined) {
                localVarQueryParameter['ArriveDate'] = (arriveDate as any instanceof Date) ?
                    (arriveDate as any).toISOString() :
                    arriveDate;
            }

            if (remark !== undefined) {
                localVarQueryParameter['Remark'] = remark;
            }

            if (createUserId !== undefined) {
                localVarQueryParameter['CreateUserId'] = createUserId;
            }

            if (createUserName !== undefined) {
                localVarQueryParameter['CreateUserName'] = createUserName;
            }

            if (createTime !== undefined) {
                localVarQueryParameter['CreateTime'] = (createTime as any instanceof Date) ?
                    (createTime as any).toISOString() :
                    createTime;
            }

            if (updateUserId !== undefined) {
                localVarQueryParameter['UpdateUserId'] = updateUserId;
            }

            if (updateUserName !== undefined) {
                localVarQueryParameter['UpdateUserName'] = updateUserName;
            }

            if (updateTime !== undefined) {
                localVarQueryParameter['UpdateTime'] = (updateTime as any instanceof Date) ?
                    (updateTime as any).toISOString() :
                    updateTime;
            }

            if (orderTimeRange) {
                localVarQueryParameter['OrderTimeRange'] = orderTimeRange;
            }

            if (sendDateRange) {
                localVarQueryParameter['SendDateRange'] = sendDateRange;
            }

            if (arriveDateRange) {
                localVarQueryParameter['ArriveDateRange'] = arriveDateRange;
            }

            if (createTimeRange) {
                localVarQueryParameter['CreateTimeRange'] = createTimeRange;
            }

            if (updateTimeRange) {
                localVarQueryParameter['UpdateTimeRange'] = updateTimeRange;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (field !== undefined) {
                localVarQueryParameter['Field'] = field;
            }

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询wms_outbound
         * @param {WmsOutboundInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundPagePost: async (body?: WmsOutboundInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取wms_outbound
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundQueryIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiOutboundQueryIdGet.');
            }
            const localVarPath = `/api/outbound/query/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新wms_outbound
         * @param {WmsOutboundUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOutboundUpdatePost: async (body?: WmsOutboundUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/outbound/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OutboundApi - functional programming interface
 * @export
 */
export const OutboundApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取wms_outbound列表
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundAddInstructionPost(id?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundAddInstructionPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 增加wms_outbound
         * @param {WmsOutboundAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundAddPost(body?: WmsOutboundAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 导出发运信息
         * @param {WmsOutboundInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundExportPost(body?: WmsOutboundInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundExportPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 下载Excel模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundExportTemplatePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundExportTemplatePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 导入发运信息
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundImportExcelPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundImportExcelPostForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取wms_outbound列表
         * @param {string} [sysOutboundNumber] 
         * @param {string} [externOrderNumber] 
         * @param {number} [customerId] 
         * @param {number} [warehouseId] 
         * @param {string} [warehouseCode] 
         * @param {number} [targetWarehouseId] 
         * @param {string} [targetWarehouseCode] 
         * @param {string} [type] 
         * @param {number} [status] 
         * @param {Date} [orderTime] 
         * @param {string} [orgId] 
         * @param {string} [province] 
         * @param {string} [city] 
         * @param {string} [district] 
         * @param {string} [address] 
         * @param {string} [contactPerson] 
         * @param {string} [mobileNumber] 
         * @param {string} [logisticsName] 
         * @param {string} [vehicleNumber] 
         * @param {number} [detailCount] 
         * @param {number} [ownerId] 
         * @param {string} [customerCode] 
         * @param {string} [customerName] 
         * @param {string} [lineCode] 
         * @param {Date} [sendDate] 
         * @param {Date} [arriveDate] 
         * @param {string} [remark] 
         * @param {number} [createUserId] 
         * @param {string} [createUserName] 
         * @param {Date} [createTime] 
         * @param {number} [updateUserId] 
         * @param {string} [updateUserName] 
         * @param {Date} [updateTime] 
         * @param {Array<Date>} [orderTimeRange] 
         * @param {Array<Date>} [sendDateRange] 
         * @param {Array<Date>} [arriveDateRange] 
         * @param {Array<Date>} [createTimeRange] 
         * @param {Array<Date>} [updateTimeRange] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundListGet(sysOutboundNumber?: string, externOrderNumber?: string, customerId?: number, warehouseId?: number, warehouseCode?: string, targetWarehouseId?: number, targetWarehouseCode?: string, type?: string, status?: number, orderTime?: Date, orgId?: string, province?: string, city?: string, district?: string, address?: string, contactPerson?: string, mobileNumber?: string, logisticsName?: string, vehicleNumber?: string, detailCount?: number, ownerId?: number, customerCode?: string, customerName?: string, lineCode?: string, sendDate?: Date, arriveDate?: Date, remark?: string, createUserId?: number, createUserName?: string, createTime?: Date, updateUserId?: number, updateUserName?: string, updateTime?: Date, orderTimeRange?: Array<Date>, sendDateRange?: Array<Date>, arriveDateRange?: Array<Date>, createTimeRange?: Array<Date>, updateTimeRange?: Array<Date>, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsOutboundOutput>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundListGet(sysOutboundNumber, externOrderNumber, customerId, warehouseId, warehouseCode, targetWarehouseId, targetWarehouseCode, type, status, orderTime, orgId, province, city, district, address, contactPerson, mobileNumber, logisticsName, vehicleNumber, detailCount, ownerId, customerCode, customerName, lineCode, sendDate, arriveDate, remark, createUserId, createUserName, createTime, updateUserId, updateUserName, updateTime, orderTimeRange, sendDateRange, arriveDateRange, createTimeRange, updateTimeRange, page, pageSize, field, order, descStr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询wms_outbound
         * @param {WmsOutboundInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundPagePost(body?: WmsOutboundInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsOutboundOutput>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取wms_outbound
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundQueryIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultWmsOutbound>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundQueryIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新wms_outbound
         * @param {WmsOutboundUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundUpdatePost(body?: WmsOutboundUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OutboundApiAxiosParamCreator(configuration).apiOutboundUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OutboundApi - factory interface
 * @export
 */
export const OutboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取wms_outbound列表
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundAddInstructionPost(id?: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OutboundApiFp(configuration).apiOutboundAddInstructionPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加wms_outbound
         * @param {WmsOutboundAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundAddPost(body?: WmsOutboundAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OutboundApiFp(configuration).apiOutboundAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导出发运信息
         * @param {WmsOutboundInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundExportPost(body?: WmsOutboundInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OutboundApiFp(configuration).apiOutboundExportPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下载Excel模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundExportTemplatePost(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OutboundApiFp(configuration).apiOutboundExportTemplatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导入发运信息
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundImportExcelPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OutboundApiFp(configuration).apiOutboundImportExcelPostForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取wms_outbound列表
         * @param {string} [sysOutboundNumber] 
         * @param {string} [externOrderNumber] 
         * @param {number} [customerId] 
         * @param {number} [warehouseId] 
         * @param {string} [warehouseCode] 
         * @param {number} [targetWarehouseId] 
         * @param {string} [targetWarehouseCode] 
         * @param {string} [type] 
         * @param {number} [status] 
         * @param {Date} [orderTime] 
         * @param {string} [orgId] 
         * @param {string} [province] 
         * @param {string} [city] 
         * @param {string} [district] 
         * @param {string} [address] 
         * @param {string} [contactPerson] 
         * @param {string} [mobileNumber] 
         * @param {string} [logisticsName] 
         * @param {string} [vehicleNumber] 
         * @param {number} [detailCount] 
         * @param {number} [ownerId] 
         * @param {string} [customerCode] 
         * @param {string} [customerName] 
         * @param {string} [lineCode] 
         * @param {Date} [sendDate] 
         * @param {Date} [arriveDate] 
         * @param {string} [remark] 
         * @param {number} [createUserId] 
         * @param {string} [createUserName] 
         * @param {Date} [createTime] 
         * @param {number} [updateUserId] 
         * @param {string} [updateUserName] 
         * @param {Date} [updateTime] 
         * @param {Array<Date>} [orderTimeRange] 
         * @param {Array<Date>} [sendDateRange] 
         * @param {Array<Date>} [arriveDateRange] 
         * @param {Array<Date>} [createTimeRange] 
         * @param {Array<Date>} [updateTimeRange] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundListGet(sysOutboundNumber?: string, externOrderNumber?: string, customerId?: number, warehouseId?: number, warehouseCode?: string, targetWarehouseId?: number, targetWarehouseCode?: string, type?: string, status?: number, orderTime?: Date, orgId?: string, province?: string, city?: string, district?: string, address?: string, contactPerson?: string, mobileNumber?: string, logisticsName?: string, vehicleNumber?: string, detailCount?: number, ownerId?: number, customerCode?: string, customerName?: string, lineCode?: string, sendDate?: Date, arriveDate?: Date, remark?: string, createUserId?: number, createUserName?: string, createTime?: Date, updateUserId?: number, updateUserName?: string, updateTime?: Date, orderTimeRange?: Array<Date>, sendDateRange?: Array<Date>, arriveDateRange?: Array<Date>, createTimeRange?: Array<Date>, updateTimeRange?: Array<Date>, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsOutboundOutput>> {
            return OutboundApiFp(configuration).apiOutboundListGet(sysOutboundNumber, externOrderNumber, customerId, warehouseId, warehouseCode, targetWarehouseId, targetWarehouseCode, type, status, orderTime, orgId, province, city, district, address, contactPerson, mobileNumber, logisticsName, vehicleNumber, detailCount, ownerId, customerCode, customerName, lineCode, sendDate, arriveDate, remark, createUserId, createUserName, createTime, updateUserId, updateUserName, updateTime, orderTimeRange, sendDateRange, arriveDateRange, createTimeRange, updateTimeRange, page, pageSize, field, order, descStr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询wms_outbound
         * @param {WmsOutboundInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundPagePost(body?: WmsOutboundInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsOutboundOutput>> {
            return OutboundApiFp(configuration).apiOutboundPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取wms_outbound
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundQueryIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultWmsOutbound>> {
            return OutboundApiFp(configuration).apiOutboundQueryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新wms_outbound
         * @param {WmsOutboundUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOutboundUpdatePost(body?: WmsOutboundUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OutboundApiFp(configuration).apiOutboundUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OutboundApi - object-oriented interface
 * @export
 * @class OutboundApi
 * @extends {BaseAPI}
 */
export class OutboundApi extends BaseAPI {
    /**
     * 
     * @summary 获取wms_outbound列表
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundAddInstructionPost(id?: Array<number>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OutboundApiFp(this.configuration).apiOutboundAddInstructionPost(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 增加wms_outbound
     * @param {WmsOutboundAddInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundAddPost(body?: WmsOutboundAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OutboundApiFp(this.configuration).apiOutboundAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 导出发运信息
     * @param {WmsOutboundInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundExportPost(body?: WmsOutboundInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OutboundApiFp(this.configuration).apiOutboundExportPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 下载Excel模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundExportTemplatePost(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OutboundApiFp(this.configuration).apiOutboundExportTemplatePost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 导入发运信息
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundImportExcelPostForm(file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OutboundApiFp(this.configuration).apiOutboundImportExcelPostForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取wms_outbound列表
     * @param {string} [sysOutboundNumber] 
     * @param {string} [externOrderNumber] 
     * @param {number} [customerId] 
     * @param {number} [warehouseId] 
     * @param {string} [warehouseCode] 
     * @param {number} [targetWarehouseId] 
     * @param {string} [targetWarehouseCode] 
     * @param {string} [type] 
     * @param {number} [status] 
     * @param {Date} [orderTime] 
     * @param {string} [orgId] 
     * @param {string} [province] 
     * @param {string} [city] 
     * @param {string} [district] 
     * @param {string} [address] 
     * @param {string} [contactPerson] 
     * @param {string} [mobileNumber] 
     * @param {string} [logisticsName] 
     * @param {string} [vehicleNumber] 
     * @param {number} [detailCount] 
     * @param {number} [ownerId] 
     * @param {string} [customerCode] 
     * @param {string} [customerName] 
     * @param {string} [lineCode] 
     * @param {Date} [sendDate] 
     * @param {Date} [arriveDate] 
     * @param {string} [remark] 
     * @param {number} [createUserId] 
     * @param {string} [createUserName] 
     * @param {Date} [createTime] 
     * @param {number} [updateUserId] 
     * @param {string} [updateUserName] 
     * @param {Date} [updateTime] 
     * @param {Array<Date>} [orderTimeRange] 
     * @param {Array<Date>} [sendDateRange] 
     * @param {Array<Date>} [arriveDateRange] 
     * @param {Array<Date>} [createTimeRange] 
     * @param {Array<Date>} [updateTimeRange] 
     * @param {number} [page] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [field] 排序字段
     * @param {string} [order] 排序方向
     * @param {string} [descStr] 降序排序
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundListGet(sysOutboundNumber?: string, externOrderNumber?: string, customerId?: number, warehouseId?: number, warehouseCode?: string, targetWarehouseId?: number, targetWarehouseCode?: string, type?: string, status?: number, orderTime?: Date, orgId?: string, province?: string, city?: string, district?: string, address?: string, contactPerson?: string, mobileNumber?: string, logisticsName?: string, vehicleNumber?: string, detailCount?: number, ownerId?: number, customerCode?: string, customerName?: string, lineCode?: string, sendDate?: Date, arriveDate?: Date, remark?: string, createUserId?: number, createUserName?: string, createTime?: Date, updateUserId?: number, updateUserName?: string, updateTime?: Date, orderTimeRange?: Array<Date>, sendDateRange?: Array<Date>, arriveDateRange?: Array<Date>, createTimeRange?: Array<Date>, updateTimeRange?: Array<Date>, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsOutboundOutput>> {
        return OutboundApiFp(this.configuration).apiOutboundListGet(sysOutboundNumber, externOrderNumber, customerId, warehouseId, warehouseCode, targetWarehouseId, targetWarehouseCode, type, status, orderTime, orgId, province, city, district, address, contactPerson, mobileNumber, logisticsName, vehicleNumber, detailCount, ownerId, customerCode, customerName, lineCode, sendDate, arriveDate, remark, createUserId, createUserName, createTime, updateUserId, updateUserName, updateTime, orderTimeRange, sendDateRange, arriveDateRange, createTimeRange, updateTimeRange, page, pageSize, field, order, descStr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询wms_outbound
     * @param {WmsOutboundInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundPagePost(body?: WmsOutboundInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsOutboundOutput>> {
        return OutboundApiFp(this.configuration).apiOutboundPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取wms_outbound
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundQueryIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultWmsOutbound>> {
        return OutboundApiFp(this.configuration).apiOutboundQueryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新wms_outbound
     * @param {WmsOutboundUpdateInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundApi
     */
    public async apiOutboundUpdatePost(body?: WmsOutboundUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OutboundApiFp(this.configuration).apiOutboundUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
