/* tslint:disable */
/* eslint-disable */
/**
 * HiGenious 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/HiGenious/'>https://gitee.com/zuohuaijun/HiGenious</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultInt32 } from '../models';
import { AdminResultListWmsOffShelfOutput } from '../models';
import { AdminResultSqlSugarPagedListWmsOffShelfOutput } from '../models';
import { WmsOffShelfInput } from '../models';
import { WmsOffShelfUpdateInput } from '../models';
/**
 * WmsOffShelfApi - axios parameter creator
 * @export
 */
export const WmsOffShelfApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 导出下架单数据
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsOffShelfExportOffShelfPost: async (body?: WmsOffShelfInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsOffShelf/exportOffShelf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取下架单_分页
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsOffShelfListPagePost: async (body?: WmsOffShelfInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsOffShelf/listPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取下架单_按条件_不分页
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsOffShelfListPost: async (body?: WmsOffShelfInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsOffShelf/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新下架单_单个
         * @param {WmsOffShelfUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsOffShelfUpdateOffShelfInfoPost: async (body?: WmsOffShelfUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsOffShelf/updateOffShelfInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WmsOffShelfApi - functional programming interface
 * @export
 */
export const WmsOffShelfApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 导出下架单数据
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfExportOffShelfPost(body?: WmsOffShelfInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await WmsOffShelfApiAxiosParamCreator(configuration).apiWmsOffShelfExportOffShelfPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取下架单_分页
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfListPagePost(body?: WmsOffShelfInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsOffShelfOutput>>> {
            const localVarAxiosArgs = await WmsOffShelfApiAxiosParamCreator(configuration).apiWmsOffShelfListPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取下架单_按条件_不分页
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfListPost(body?: WmsOffShelfInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsOffShelfOutput>>> {
            const localVarAxiosArgs = await WmsOffShelfApiAxiosParamCreator(configuration).apiWmsOffShelfListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新下架单_单个
         * @param {WmsOffShelfUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfUpdateOffShelfInfoPost(body?: WmsOffShelfUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt32>>> {
            const localVarAxiosArgs = await WmsOffShelfApiAxiosParamCreator(configuration).apiWmsOffShelfUpdateOffShelfInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WmsOffShelfApi - factory interface
 * @export
 */
export const WmsOffShelfApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 导出下架单数据
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfExportOffShelfPost(body?: WmsOffShelfInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return WmsOffShelfApiFp(configuration).apiWmsOffShelfExportOffShelfPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取下架单_分页
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfListPagePost(body?: WmsOffShelfInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsOffShelfOutput>> {
            return WmsOffShelfApiFp(configuration).apiWmsOffShelfListPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取下架单_按条件_不分页
         * @param {WmsOffShelfInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfListPost(body?: WmsOffShelfInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsOffShelfOutput>> {
            return WmsOffShelfApiFp(configuration).apiWmsOffShelfListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新下架单_单个
         * @param {WmsOffShelfUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsOffShelfUpdateOffShelfInfoPost(body?: WmsOffShelfUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
            return WmsOffShelfApiFp(configuration).apiWmsOffShelfUpdateOffShelfInfoPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WmsOffShelfApi - object-oriented interface
 * @export
 * @class WmsOffShelfApi
 * @extends {BaseAPI}
 */
export class WmsOffShelfApi extends BaseAPI {
    /**
     * 
     * @summary 导出下架单数据
     * @param {WmsOffShelfInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsOffShelfApi
     */
    public async apiWmsOffShelfExportOffShelfPost(body?: WmsOffShelfInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return WmsOffShelfApiFp(this.configuration).apiWmsOffShelfExportOffShelfPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取下架单_分页
     * @param {WmsOffShelfInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsOffShelfApi
     */
    public async apiWmsOffShelfListPagePost(body?: WmsOffShelfInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsOffShelfOutput>> {
        return WmsOffShelfApiFp(this.configuration).apiWmsOffShelfListPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取下架单_按条件_不分页
     * @param {WmsOffShelfInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsOffShelfApi
     */
    public async apiWmsOffShelfListPost(body?: WmsOffShelfInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsOffShelfOutput>> {
        return WmsOffShelfApiFp(this.configuration).apiWmsOffShelfListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新下架单_单个
     * @param {WmsOffShelfUpdateInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsOffShelfApi
     */
    public async apiWmsOffShelfUpdateOffShelfInfoPost(body?: WmsOffShelfUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt32>> {
        return WmsOffShelfApiFp(this.configuration).apiWmsOffShelfUpdateOffShelfInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
