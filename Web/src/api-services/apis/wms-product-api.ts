/* tslint:disable */
/* eslint-disable */
/**
 * HiGenious 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/HiGenious/'>https://gitee.com/zuohuaijun/HiGenious</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultBaseImportResultWmsProduct } from '../models';
import { AdminResultBoolean } from '../models';
import { AdminResultInt32 } from '../models';
import { AdminResultListWmsProductOutput } from '../models';
import { AdminResultSqlSugarPagedListWmsProductOutput } from '../models';
import { WmsProductAddInput } from '../models';
import { WmsProductDeleteInput } from '../models';
import { WmsProductInput } from '../models';
import { WmsProductUpdateInput } from '../models';
/**
 * WmsProductApi - axios parameter creator
 * @export
 */
export const WmsProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加产品_单个
         * @param {WmsProductAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductAddProductInfoPost: async (body?: WmsProductAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/addProductInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除产品_物理删除
         * @param {WmsProductDeleteInput} [body] 待删除装卸台Id集合
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductBatchDelPost: async (body?: WmsProductDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/batchDel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导出产品主数据
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductExportProductPost: async (body?: WmsProductInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/exportProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生成产品主数据导入模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductGenerateImportTemplatePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/generateImportTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 导入产品主数据
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductImportProductPostForm: async (file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/importProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取产品_按条件_不分页
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductListPost: async (body?: WmsProductInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取产品（不带层级关系）_分页
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductPageNoLevelPost: async (body?: WmsProductInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/pageNoLevel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取产品_分页（用户登录后的工厂id和仓库id还没加）
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductPagePost: async (body?: WmsProductInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新产品_单个
         * @param {WmsProductUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsProductUpdateProductInfoPost: async (body?: WmsProductUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsProduct/updateProductInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WmsProductApi - functional programming interface
 * @export
 */
export const WmsProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加产品_单个
         * @param {WmsProductAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductAddProductInfoPost(body?: WmsProductAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt32>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductAddProductInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除产品_物理删除
         * @param {WmsProductDeleteInput} [body] 待删除装卸台Id集合
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductBatchDelPost(body?: WmsProductDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductBatchDelPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 导出产品主数据
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductExportProductPost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductExportProductPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 生成产品主数据导入模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductGenerateImportTemplatePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductGenerateImportTemplatePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 导入产品主数据
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductImportProductPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBaseImportResultWmsProduct>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductImportProductPostForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取产品_按条件_不分页
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductListPost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsProductOutput>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取产品（不带层级关系）_分页
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductPageNoLevelPost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsProductOutput>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductPageNoLevelPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取产品_分页（用户登录后的工厂id和仓库id还没加）
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductPagePost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsProductOutput>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新产品_单个
         * @param {WmsProductUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductUpdateProductInfoPost(body?: WmsProductUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt32>>> {
            const localVarAxiosArgs = await WmsProductApiAxiosParamCreator(configuration).apiWmsProductUpdateProductInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WmsProductApi - factory interface
 * @export
 */
export const WmsProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加产品_单个
         * @param {WmsProductAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductAddProductInfoPost(body?: WmsProductAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
            return WmsProductApiFp(configuration).apiWmsProductAddProductInfoPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除产品_物理删除
         * @param {WmsProductDeleteInput} [body] 待删除装卸台Id集合
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductBatchDelPost(body?: WmsProductDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
            return WmsProductApiFp(configuration).apiWmsProductBatchDelPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导出产品主数据
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductExportProductPost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return WmsProductApiFp(configuration).apiWmsProductExportProductPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生成产品主数据导入模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductGenerateImportTemplatePost(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return WmsProductApiFp(configuration).apiWmsProductGenerateImportTemplatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 导入产品主数据
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductImportProductPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBaseImportResultWmsProduct>> {
            return WmsProductApiFp(configuration).apiWmsProductImportProductPostForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取产品_按条件_不分页
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductListPost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsProductOutput>> {
            return WmsProductApiFp(configuration).apiWmsProductListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取产品（不带层级关系）_分页
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductPageNoLevelPost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsProductOutput>> {
            return WmsProductApiFp(configuration).apiWmsProductPageNoLevelPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取产品_分页（用户登录后的工厂id和仓库id还没加）
         * @param {WmsProductInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductPagePost(body?: WmsProductInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsProductOutput>> {
            return WmsProductApiFp(configuration).apiWmsProductPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新产品_单个
         * @param {WmsProductUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsProductUpdateProductInfoPost(body?: WmsProductUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt32>> {
            return WmsProductApiFp(configuration).apiWmsProductUpdateProductInfoPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WmsProductApi - object-oriented interface
 * @export
 * @class WmsProductApi
 * @extends {BaseAPI}
 */
export class WmsProductApi extends BaseAPI {
    /**
     * 
     * @summary 添加产品_单个
     * @param {WmsProductAddInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductAddProductInfoPost(body?: WmsProductAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt32>> {
        return WmsProductApiFp(this.configuration).apiWmsProductAddProductInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除产品_物理删除
     * @param {WmsProductDeleteInput} [body] 待删除装卸台Id集合
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductBatchDelPost(body?: WmsProductDeleteInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBoolean>> {
        return WmsProductApiFp(this.configuration).apiWmsProductBatchDelPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 导出产品主数据
     * @param {WmsProductInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductExportProductPost(body?: WmsProductInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return WmsProductApiFp(this.configuration).apiWmsProductExportProductPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 生成产品主数据导入模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductGenerateImportTemplatePost(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return WmsProductApiFp(this.configuration).apiWmsProductGenerateImportTemplatePost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 导入产品主数据
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductImportProductPostForm(file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBaseImportResultWmsProduct>> {
        return WmsProductApiFp(this.configuration).apiWmsProductImportProductPostForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取产品_按条件_不分页
     * @param {WmsProductInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductListPost(body?: WmsProductInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsProductOutput>> {
        return WmsProductApiFp(this.configuration).apiWmsProductListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取产品（不带层级关系）_分页
     * @param {WmsProductInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductPageNoLevelPost(body?: WmsProductInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsProductOutput>> {
        return WmsProductApiFp(this.configuration).apiWmsProductPageNoLevelPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取产品_分页（用户登录后的工厂id和仓库id还没加）
     * @param {WmsProductInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductPagePost(body?: WmsProductInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsProductOutput>> {
        return WmsProductApiFp(this.configuration).apiWmsProductPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新产品_单个
     * @param {WmsProductUpdateInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsProductApi
     */
    public async apiWmsProductUpdateProductInfoPost(body?: WmsProductUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt32>> {
        return WmsProductApiFp(this.configuration).apiWmsProductUpdateProductInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
