/* tslint:disable */
/* eslint-disable */
/**
 * HiGenious 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/HiGenious/'>https://gitee.com/zuohuaijun/HiGenious</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultBoolean } from '../models';
import { AdminResultInt64 } from '../models';
import { AdminResultListWmsWarehouse } from '../models';
import { AdminResultListWmsWarehouseSelectOutput } from '../models';
import { AdminResultSqlSugarPagedListWmsWarehouseOutput } from '../models';
import { AdminResultWmsWarehouseOutput } from '../models';
import { WmsWarehouseAddInput } from '../models';
import { WmsWarehouseDeleteInput } from '../models';
import { WmsWarehouseInfoInput } from '../models';
import { WmsWarehousePageListInput } from '../models';
import { WmsWarehouseSelectInput } from '../models';
import { WmsWarehouseUpdateInput } from '../models';
/**
 * WmsWarehouseApi - axios parameter creator
 * @export
 */
export const WmsWarehouseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加仓库详情
         * @param {WmsWarehouseAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAddPost: async (body?: WmsWarehouseAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新仓库
         * @param {WmsWarehouseDeleteInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseDeletePost: async (body?: WmsWarehouseDeleteInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取仓库下拉
         * @param {WmsWarehouseInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseGetInfoPost: async (body?: WmsWarehouseInfoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/getInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询仓库列表
         * @param {WmsWarehousePageListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseGetPageListPost: async (body?: WmsWarehousePageListInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/getPageList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取仓库下拉列表
         * @param {WmsWarehouseSelectInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseSelectListPost: async (body?: WmsWarehouseSelectInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/selectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取仓库树控件列表
         * @param {number} [id] 
         * @param {number} [warehouseId] 
         * @param {string} [code] 
         * @param {string} [name] 
         * @param {number} [status] 
         * @param {string} [type] 
         * @param {number} [isOneOne] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseTreeListPost: async (id?: number, warehouseId?: number, code?: string, name?: string, status?: number, type?: string, isOneOne?: number, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/treeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (warehouseId !== undefined) {
                localVarQueryParameter['WarehouseId'] = warehouseId;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (isOneOne !== undefined) {
                localVarQueryParameter['IsOneOne'] = isOneOne;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (field !== undefined) {
                localVarQueryParameter['Field'] = field;
            }

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加仓库
         * @param {WmsWarehouseUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseUpdatePost: async (body?: WmsWarehouseUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouse/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WmsWarehouseApi - functional programming interface
 * @export
 */
export const WmsWarehouseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加仓库详情
         * @param {WmsWarehouseAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAddPost(body?: WmsWarehouseAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新仓库
         * @param {WmsWarehouseDeleteInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseDeletePost(body?: WmsWarehouseDeleteInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取仓库下拉
         * @param {WmsWarehouseInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseGetInfoPost(body?: WmsWarehouseInfoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultWmsWarehouseOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseGetInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询仓库列表
         * @param {WmsWarehousePageListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseGetPageListPost(body?: WmsWarehousePageListInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseGetPageListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取仓库下拉列表
         * @param {WmsWarehouseSelectInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseSelectListPost(body?: WmsWarehouseSelectInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsWarehouseSelectOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseSelectListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取仓库树控件列表
         * @param {number} [id] 
         * @param {number} [warehouseId] 
         * @param {string} [code] 
         * @param {string} [name] 
         * @param {number} [status] 
         * @param {string} [type] 
         * @param {number} [isOneOne] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseTreeListPost(id?: number, warehouseId?: number, code?: string, name?: string, status?: number, type?: string, isOneOne?: number, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsWarehouse>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseTreeListPost(id, warehouseId, code, name, status, type, isOneOne, page, pageSize, field, order, descStr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加仓库
         * @param {WmsWarehouseUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseUpdatePost(body?: WmsWarehouseUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await WmsWarehouseApiAxiosParamCreator(configuration).apiWmsWarehouseUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WmsWarehouseApi - factory interface
 * @export
 */
export const WmsWarehouseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加仓库详情
         * @param {WmsWarehouseAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAddPost(body?: WmsWarehouseAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新仓库
         * @param {WmsWarehouseDeleteInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseDeletePost(body?: WmsWarehouseDeleteInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取仓库下拉
         * @param {WmsWarehouseInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseGetInfoPost(body?: WmsWarehouseInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultWmsWarehouseOutput>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseGetInfoPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询仓库列表
         * @param {WmsWarehousePageListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseGetPageListPost(body?: WmsWarehousePageListInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseOutput>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseGetPageListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取仓库下拉列表
         * @param {WmsWarehouseSelectInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseSelectListPost(body?: WmsWarehouseSelectInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsWarehouseSelectOutput>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseSelectListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取仓库树控件列表
         * @param {number} [id] 
         * @param {number} [warehouseId] 
         * @param {string} [code] 
         * @param {string} [name] 
         * @param {number} [status] 
         * @param {string} [type] 
         * @param {number} [isOneOne] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseTreeListPost(id?: number, warehouseId?: number, code?: string, name?: string, status?: number, type?: string, isOneOne?: number, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsWarehouse>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseTreeListPost(id, warehouseId, code, name, status, type, isOneOne, page, pageSize, field, order, descStr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加仓库
         * @param {WmsWarehouseUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseUpdatePost(body?: WmsWarehouseUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return WmsWarehouseApiFp(configuration).apiWmsWarehouseUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WmsWarehouseApi - object-oriented interface
 * @export
 * @class WmsWarehouseApi
 * @extends {BaseAPI}
 */
export class WmsWarehouseApi extends BaseAPI {
    /**
     * 
     * @summary 增加仓库详情
     * @param {WmsWarehouseAddInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseAddPost(body?: WmsWarehouseAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新仓库
     * @param {WmsWarehouseDeleteInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseDeletePost(body?: WmsWarehouseDeleteInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBoolean>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取仓库下拉
     * @param {WmsWarehouseInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseGetInfoPost(body?: WmsWarehouseInfoInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultWmsWarehouseOutput>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseGetInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查询仓库列表
     * @param {WmsWarehousePageListInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseGetPageListPost(body?: WmsWarehousePageListInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseOutput>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseGetPageListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取仓库下拉列表
     * @param {WmsWarehouseSelectInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseSelectListPost(body?: WmsWarehouseSelectInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsWarehouseSelectOutput>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseSelectListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取仓库树控件列表
     * @param {number} [id] 
     * @param {number} [warehouseId] 
     * @param {string} [code] 
     * @param {string} [name] 
     * @param {number} [status] 
     * @param {string} [type] 
     * @param {number} [isOneOne] 
     * @param {number} [page] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [field] 排序字段
     * @param {string} [order] 排序方向
     * @param {string} [descStr] 降序排序
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseTreeListPost(id?: number, warehouseId?: number, code?: string, name?: string, status?: number, type?: string, isOneOne?: number, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsWarehouse>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseTreeListPost(id, warehouseId, code, name, status, type, isOneOne, page, pageSize, field, order, descStr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 添加仓库
     * @param {WmsWarehouseUpdateInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseApi
     */
    public async apiWmsWarehouseUpdatePost(body?: WmsWarehouseUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return WmsWarehouseApiFp(this.configuration).apiWmsWarehouseUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
