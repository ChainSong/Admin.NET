/* tslint:disable */
/* eslint-disable */
/**
 * HiGenious 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/HiGenious/'>https://gitee.com/zuohuaijun/HiGenious</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultBoolean } from '../models';
import { AdminResultInt64 } from '../models';
import { AdminResultListWmsAreaSelectOutput } from '../models';
import { AdminResultListWmsWarehouseAreaInfoOutput } from '../models';
import { AdminResultListWmsWarehouseAreaTreeListOutput } from '../models';
import { AdminResultSqlSugarPagedListWmsWarehouseAreaListOutput } from '../models';
import { WmsWarehouseAreaAddInput } from '../models';
import { WmsWarehouseAreaDeteleInput } from '../models';
import { WmsWarehouseAreaInput } from '../models';
import { WmsWarehouseAreaListInput } from '../models';
import { WmsWarehouseAreaUpdateInput } from '../models';
/**
 * WmsWarehouseAreaApi - axios parameter creator
 * @export
 */
export const WmsWarehouseAreaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加库区
         * @param {WmsWarehouseAreaAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaAddPost: async (body?: WmsWarehouseAreaAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseArea/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除库区   批量
         * @param {WmsWarehouseAreaDeteleInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaDelPost: async (body?: WmsWarehouseAreaDeteleInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseArea/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询库区库位详情
         * @param {WmsWarehouseAreaInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaInfoPost: async (body?: WmsWarehouseAreaInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseArea/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {WmsWarehouseAreaListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaPagePost: async (body?: WmsWarehouseAreaListInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseArea/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {string} warehouseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaSelectListWarehouseIdPost: async (warehouseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'warehouseId' is not null or undefined
            if (warehouseId === null || warehouseId === undefined) {
                throw new RequiredError('warehouseId','Required parameter warehouseId was null or undefined when calling apiWmsWarehouseAreaSelectListWarehouseIdPost.');
            }
            const localVarPath = `/api/wmsWarehouseArea/selectList/{warehouseId}`
                .replace(`{${"warehouseId"}}`, encodeURIComponent(String(warehouseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {number} id 主键Id
         * @param {string} [name] 
         * @param {string} [code] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaTreeListPost: async (id: number, name?: string, code?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWmsWarehouseAreaTreeListPost.');
            }
            const localVarPath = `/api/wmsWarehouseArea/treeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新库区
         * @param {WmsWarehouseAreaUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseAreaUpdatePost: async (body?: WmsWarehouseAreaUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseArea/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WmsWarehouseAreaApi - functional programming interface
 * @export
 */
export const WmsWarehouseAreaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加库区
         * @param {WmsWarehouseAreaAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaAddPost(body?: WmsWarehouseAreaAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除库区   批量
         * @param {WmsWarehouseAreaDeteleInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaDelPost(body?: WmsWarehouseAreaDeteleInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaDelPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询库区库位详情
         * @param {WmsWarehouseAreaInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaInfoPost(body?: WmsWarehouseAreaInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsWarehouseAreaInfoOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {WmsWarehouseAreaListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaPagePost(body?: WmsWarehouseAreaListInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseAreaListOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {string} warehouseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaSelectListWarehouseIdPost(warehouseId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsAreaSelectOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaSelectListWarehouseIdPost(warehouseId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {number} id 主键Id
         * @param {string} [name] 
         * @param {string} [code] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaTreeListPost(id: number, name?: string, code?: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsWarehouseAreaTreeListOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaTreeListPost(id, name, code, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新库区
         * @param {WmsWarehouseAreaUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaUpdatePost(body?: WmsWarehouseAreaUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await WmsWarehouseAreaApiAxiosParamCreator(configuration).apiWmsWarehouseAreaUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WmsWarehouseAreaApi - factory interface
 * @export
 */
export const WmsWarehouseAreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加库区
         * @param {WmsWarehouseAreaAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaAddPost(body?: WmsWarehouseAreaAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除库区   批量
         * @param {WmsWarehouseAreaDeteleInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaDelPost(body?: WmsWarehouseAreaDeteleInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaDelPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询库区库位详情
         * @param {WmsWarehouseAreaInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaInfoPost(body?: WmsWarehouseAreaInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsWarehouseAreaInfoOutput>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaInfoPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {WmsWarehouseAreaListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaPagePost(body?: WmsWarehouseAreaListInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseAreaListOutput>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {string} warehouseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaSelectListWarehouseIdPost(warehouseId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsAreaSelectOutput>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaSelectListWarehouseIdPost(warehouseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {number} id 主键Id
         * @param {string} [name] 
         * @param {string} [code] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaTreeListPost(id: number, name?: string, code?: string, type?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsWarehouseAreaTreeListOutput>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaTreeListPost(id, name, code, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新库区
         * @param {WmsWarehouseAreaUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseAreaUpdatePost(body?: WmsWarehouseAreaUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return WmsWarehouseAreaApiFp(configuration).apiWmsWarehouseAreaUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WmsWarehouseAreaApi - object-oriented interface
 * @export
 * @class WmsWarehouseAreaApi
 * @extends {BaseAPI}
 */
export class WmsWarehouseAreaApi extends BaseAPI {
    /**
     * 
     * @summary 添加库区
     * @param {WmsWarehouseAreaAddInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaAddPost(body?: WmsWarehouseAreaAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除库区   批量
     * @param {WmsWarehouseAreaDeteleInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaDelPost(body?: WmsWarehouseAreaDeteleInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBoolean>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaDelPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查询库区库位详情
     * @param {WmsWarehouseAreaInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaInfoPost(body?: WmsWarehouseAreaInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsWarehouseAreaInfoOutput>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取库区列表
     * @param {WmsWarehouseAreaListInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaPagePost(body?: WmsWarehouseAreaListInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseAreaListOutput>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取库区列表
     * @param {string} warehouseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaSelectListWarehouseIdPost(warehouseId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsAreaSelectOutput>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaSelectListWarehouseIdPost(warehouseId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取库区列表
     * @param {number} id 主键Id
     * @param {string} [name] 
     * @param {string} [code] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaTreeListPost(id: number, name?: string, code?: string, type?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsWarehouseAreaTreeListOutput>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaTreeListPost(id, name, code, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新库区
     * @param {WmsWarehouseAreaUpdateInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseAreaApi
     */
    public async apiWmsWarehouseAreaUpdatePost(body?: WmsWarehouseAreaUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return WmsWarehouseAreaApiFp(this.configuration).apiWmsWarehouseAreaUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
