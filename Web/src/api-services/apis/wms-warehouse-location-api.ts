/* tslint:disable */
/* eslint-disable */
/**
 * HiGenious 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/HiGenious/'>https://gitee.com/zuohuaijun/HiGenious</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultBoolean } from '../models';
import { AdminResultInt64 } from '../models';
import { AdminResultListWmsWarehouseLocationSelectOutput } from '../models';
import { AdminResultSqlSugarPagedListWmsWarehouseLocationListOutput } from '../models';
import { AdminResultWmsWarehouseLocation } from '../models';
import { WmsWarehouseLocationAddInput } from '../models';
import { WmsWarehouseLocationInfoInput } from '../models';
import { WmsWarehouseLocationPageListInput } from '../models';
import { WmsWarehouseLocationUpdateInput } from '../models';
/**
 * WmsWarehouseLocationApi - axios parameter creator
 * @export
 */
export const WmsWarehouseLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加库区信息_单个
         * @param {WmsWarehouseLocationAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseLocationAddPost: async (body?: WmsWarehouseLocationAddInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseLocation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除库位_单个
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseLocationDelIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiWmsWarehouseLocationDelIdPost.');
            }
            const localVarPath = `/api/wmsWarehouseLocation/del/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看库区详情
         * @param {WmsWarehouseLocationInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseLocationInfoPost: async (body?: WmsWarehouseLocationInfoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseLocation/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {WmsWarehouseLocationPageListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseLocationPagePost: async (body?: WmsWarehouseLocationPageListInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseLocation/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 库位下拉
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseLocationSelectListAreaIdPost: async (areaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            if (areaId === null || areaId === undefined) {
                throw new RequiredError('areaId','Required parameter areaId was null or undefined when calling apiWmsWarehouseLocationSelectListAreaIdPost.');
            }
            const localVarPath = `/api/wmsWarehouseLocation/selectList/{areaId}`
                .replace(`{${"areaId"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新库区信息_单个
         * @param {WmsWarehouseLocationUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWmsWarehouseLocationUpdatePost: async (body?: WmsWarehouseLocationUpdateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/wmsWarehouseLocation/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WmsWarehouseLocationApi - functional programming interface
 * @export
 */
export const WmsWarehouseLocationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加库区信息_单个
         * @param {WmsWarehouseLocationAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationAddPost(body?: WmsWarehouseLocationAddInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await WmsWarehouseLocationApiAxiosParamCreator(configuration).apiWmsWarehouseLocationAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除库位_单个
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationDelIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBoolean>>> {
            const localVarAxiosArgs = await WmsWarehouseLocationApiAxiosParamCreator(configuration).apiWmsWarehouseLocationDelIdPost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查看库区详情
         * @param {WmsWarehouseLocationInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationInfoPost(body?: WmsWarehouseLocationInfoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultWmsWarehouseLocation>>> {
            const localVarAxiosArgs = await WmsWarehouseLocationApiAxiosParamCreator(configuration).apiWmsWarehouseLocationInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {WmsWarehouseLocationPageListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationPagePost(body?: WmsWarehouseLocationPageListInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseLocationListOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseLocationApiAxiosParamCreator(configuration).apiWmsWarehouseLocationPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 库位下拉
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationSelectListAreaIdPost(areaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListWmsWarehouseLocationSelectOutput>>> {
            const localVarAxiosArgs = await WmsWarehouseLocationApiAxiosParamCreator(configuration).apiWmsWarehouseLocationSelectListAreaIdPost(areaId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新库区信息_单个
         * @param {WmsWarehouseLocationUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationUpdatePost(body?: WmsWarehouseLocationUpdateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultInt64>>> {
            const localVarAxiosArgs = await WmsWarehouseLocationApiAxiosParamCreator(configuration).apiWmsWarehouseLocationUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WmsWarehouseLocationApi - factory interface
 * @export
 */
export const WmsWarehouseLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加库区信息_单个
         * @param {WmsWarehouseLocationAddInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationAddPost(body?: WmsWarehouseLocationAddInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return WmsWarehouseLocationApiFp(configuration).apiWmsWarehouseLocationAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除库位_单个
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationDelIdPost(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBoolean>> {
            return WmsWarehouseLocationApiFp(configuration).apiWmsWarehouseLocationDelIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看库区详情
         * @param {WmsWarehouseLocationInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationInfoPost(body?: WmsWarehouseLocationInfoInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultWmsWarehouseLocation>> {
            return WmsWarehouseLocationApiFp(configuration).apiWmsWarehouseLocationInfoPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取库区列表
         * @param {WmsWarehouseLocationPageListInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationPagePost(body?: WmsWarehouseLocationPageListInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseLocationListOutput>> {
            return WmsWarehouseLocationApiFp(configuration).apiWmsWarehouseLocationPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 库位下拉
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationSelectListAreaIdPost(areaId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListWmsWarehouseLocationSelectOutput>> {
            return WmsWarehouseLocationApiFp(configuration).apiWmsWarehouseLocationSelectListAreaIdPost(areaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新库区信息_单个
         * @param {WmsWarehouseLocationUpdateInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWmsWarehouseLocationUpdatePost(body?: WmsWarehouseLocationUpdateInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultInt64>> {
            return WmsWarehouseLocationApiFp(configuration).apiWmsWarehouseLocationUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WmsWarehouseLocationApi - object-oriented interface
 * @export
 * @class WmsWarehouseLocationApi
 * @extends {BaseAPI}
 */
export class WmsWarehouseLocationApi extends BaseAPI {
    /**
     * 
     * @summary 增加库区信息_单个
     * @param {WmsWarehouseLocationAddInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseLocationApi
     */
    public async apiWmsWarehouseLocationAddPost(body?: WmsWarehouseLocationAddInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return WmsWarehouseLocationApiFp(this.configuration).apiWmsWarehouseLocationAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除库位_单个
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseLocationApi
     */
    public async apiWmsWarehouseLocationDelIdPost(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBoolean>> {
        return WmsWarehouseLocationApiFp(this.configuration).apiWmsWarehouseLocationDelIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查看库区详情
     * @param {WmsWarehouseLocationInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseLocationApi
     */
    public async apiWmsWarehouseLocationInfoPost(body?: WmsWarehouseLocationInfoInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultWmsWarehouseLocation>> {
        return WmsWarehouseLocationApiFp(this.configuration).apiWmsWarehouseLocationInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取库区列表
     * @param {WmsWarehouseLocationPageListInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseLocationApi
     */
    public async apiWmsWarehouseLocationPagePost(body?: WmsWarehouseLocationPageListInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListWmsWarehouseLocationListOutput>> {
        return WmsWarehouseLocationApiFp(this.configuration).apiWmsWarehouseLocationPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 库位下拉
     * @param {string} areaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseLocationApi
     */
    public async apiWmsWarehouseLocationSelectListAreaIdPost(areaId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListWmsWarehouseLocationSelectOutput>> {
        return WmsWarehouseLocationApiFp(this.configuration).apiWmsWarehouseLocationSelectListAreaIdPost(areaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新库区信息_单个
     * @param {WmsWarehouseLocationUpdateInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmsWarehouseLocationApi
     */
    public async apiWmsWarehouseLocationUpdatePost(body?: WmsWarehouseLocationUpdateInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultInt64>> {
        return WmsWarehouseLocationApiFp(this.configuration).apiWmsWarehouseLocationUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
